:icons: font
:twitter-tag: UDE
:conference-tag:
:talk-tag: Background Threading
:linkattrs:
ifndef::partials[:partials: partials]

include::{partials}/footer.ad[]

//== !
//image::pattern-design-4pwbdv1y.jpg[background, size=auto]
// Fuente: https://standaserigraf.wordpress.com/2015/09/30/pattern-design-tecnica-artistica-que-se-ocupa-de-la-creacion-de-patrones-graficos/

== Tareas de segundo plano en Android

== Tareas en segundo plano

La aplicación principal, sus activities, servicios o llamadas externas se ejecutan en el hilo principal (Main thread), es por esto que cualquier proceso en ejecución bloquearía la interfaz de usuario durante el tiempo que se esté ejecutando.

== ANR

Bloquear durante mucho tiempo la interfaz de usuario genera en el usuario una mala experiencia de uso, una pobre usabilidad, y el riesgo de recibir un "Application Not Responding" (ANR), luego de 5 segundos con el hilo principal bloqueado.

image::anr.png[size=auto]

== Alternativas para ejecutar tareas en segundo plano

* Threads
* AsyncTask (Deprecated)
* Looper
* Coroutines

== Manejando múltiples threads

Un thread pool es una colección administrada de threads que ejecuta tareas en paralelo desde una cola.
Las nuevas tareas se ejecutan en threads existentes a medida que esos threads quedan inactivos.

Para enviar una tarea a un thread pool, se recomienda usar la interfaz `ExecutorService`.

[NOTE.speaker]
====
Crear threads es una tarea es costoso, por lo que debe crear un thread pool solo una vez a medida que se inicializa su aplicación.
Asegúrese de guardar la instancia del `ExecutorService` en una clase que herede de `Application` (funciona como Singleton) o usar un contenedor de inyección de dependencia.

Se recomienda revisar la documentación oficial para explorar diferentes maneras de inicializar el Pool de Threads https://developer.android.com/guide/background/threading#configuring-a-thread-pool
====

[source,kotlin]
----
class MyApplication : Application() {
    val executorService: ExecutorService = Executors.newFixedThreadPool(4)
}
----

== Ejecutando una tarea en segundo plano

Hacer una petición de red en el hilo principal hace que el hilo espere o se bloquee hasta que reciba una respuesta.
Dado que el hilo está bloqueado, el sistema operativo no puede llamar a `onDraw()` y su aplicación se congela, lo que puede generar un ANR.
En Android está prohibido hacer peticiones de red (ej. llamadas a web services) en el hilo principal.

== Ejecución de una tarea en segundo plano

[source,kotlin]
----
   fun doInBackground() {
        executor.execute {
            for (i in 1..100) {
                Log.i("TimerTask", "Execution $i")
                try {
                    Thread.sleep(100)
                } catch (e: InterruptedException) {
                    Thread.currentThread().interrupt()
                }
            }
        }
    }
----

== ¿Cómo detener un Thread en ejecución ?

Podemos usar una bandera para controlarlo.
Java nos ofrece la clase `AtomicBoolean` (que podemos invocar desde Kotlin), la cual podemos usar para actualizaciones que necesiten ser atómicas (Thread Safe).

== !

[source,kotlin]
----
private val running: AtomicBoolean = AtomicBoolean(false)
fun doInBackground() {
    executor.execute {
        running.set(true)
        for (i in 1..100) {
            if (running.get()) {
                /*Lógica */
            } else {
                break
            }
        }
    }
}
fun stop() {
    running.set(false)
}
----

== Coroutines

Las coroutines (en español corrutinas) son componentes de programas que generalizan las subrutinas para la multitarea no preventiva, al permitir que se suspenda y se reanude la ejecución.

Podemos imaginarlas que su funcionamiento es es como el del los Threads, pero con algunas diferencias.

== Corrutinas en Kotlin

Las corrutinas han formado del ecosistema de Kotlin desde la versión 1.1 como una caraterística experimental. Pero Kotlin 1.3 lanzó la API final, y ahora están listas para ser usadas en producción.

== Dependencias para usar Corrutinas en Android
[source,groovy]
----
implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.8'`
----

== Características de las corrutinas

* Permiten escribir tu código asícrono de forma secuencial, lo que reduce drásticamente la carga cognitiva.

* Son mucho más eficientes que los Threads.
Varias corrutinas se pueden ejecutar utilizando el mismo hilo.

* Las corrutinas se basan en la idea de las funciones de suspensión (`suspend` functions).

== `suspend` functions

Estas son funciones que pueden detener la ejecución de una corrutina en cualquier punto y luego devolverle el control una vez que el resultado esté listo y la función haya terminado de hacer su trabajo.

Las corrutinas son básicamente un lugar seguro donde las funciones de suspensión (normalmente) no bloquean el hilo principal.

== Contexto de corrutina

La corrutinas se ejecutan en un contexto que define las reglas y configuraciones de su ejecución.
Puede ser:

* Explicito: Configuramos manualmente el dispatcher que se utilizará.
* Por el scope de la corrutina.

== Tipos Dispatchers

* Default
* IO
* Unconfined
* Main

== Dispatcher Default

Se usará cuando no se defina un dispatcher, pero también podemos configurarlo explícitamente.
Este dispatcher se utiliza para ejecutar tareas que hacen un uso intensivo de la CPU, principalmente cálculos de la propia App, algoritmos, etc.

== Dispatcher IO

Se utiliza para ejecutar operaciones de entrada/salida.
En general, todas las tareas que bloquearán el hilo mientras esperan la respuesta de otro sistema: peticiones al servidor, acceso a la base de datos, sitema de archivos, sensores… ya que no usan la CPU, se puede tener muchas en ejecución al mismo tiempo, por lo que el tamaño de este grupo de hilos es de 64.

== Dispatcher Unconfined

Si no te importa mucho qué hilo se utiliza, puedes usar este dispatcher.
Es difícil predecir qué hilo se usará, así que no lo uses a menos que estés muy seguro de lo que estás haciendo.

== Distpacher Main

Este es un dispatcher especial que se incluye en las librerías de corrutinas relacionadas con interfaz de usuario.
En particular, en Android, utilizará el hilo de UI.

== Invocación y declaración

[source,kotlin]
----
// Invocación
GlobalScope.launch(Dispatchers.Main) { task.doInBackground() }
// Declaración
suspend fun doInBackground() {
    withContext(Dispatchers.IO) { // Cambia al dispatcher de I/O
        for (i in 1..100) {
            if (isActive) { // Chequea por el estado actual
                Log.i("TimerTask", "Execution $i")
                // Lógica
            } else {
                break
            }
        }
    }
}
----

== Cancelando una corrutina

La invocación de `GlobalScope.launch` nos retorna un `job`.
Que es otra clase que implementa `CoroutineContext`.

Los jobs proveen las funciones `cancel y `join con los que podemos cancelar las corrutinas o bloquearla hasta que las jobs hijos hayan finalizado.

== !

[source,kotlin]
----
job = GlobalScope.launch(Dispatchers.Main) { task.doInBackground() }
job.cancel() //Detiene la corrutina
----

== Bloquear la UI

* Podríamos bloquear la UI mientras se ejecuta la tarea asíncrona y al mismo tiempo informar al usuario sobre el progreso de la misma
* Para lograr este objetivo, Android nos provee el control ProgressBar

image::progressbar.png[width=300px]

== Conclusiones

* Cuando desarrollamos en Android existen restricciones en cuánto al uso del hilo principal. Para ser peticiones a servicios remotos u operaciones costosas debemos usar el hilo secundario.

* Android es compatible con el API de concurrencia de Java.

* Las corrutinas simplifican la ejecución de tareas en segundo plano.

include::{partials}/self.ad[]
